// Merge groups vertical by default.
.group {
  @include group();
  margin-bottom: 0;

  > .group-item,
  &.group-all > * {
    @include group-item();
    margin-bottom: $spacer-y;
  }

  // Reset spacing for nested groups
  .group {
    margin-bottom: - $spacer-y !important;

    &.group-merge {
      margin-bottom: 0 !important;
    }
  }
}

ul.group,
ol.group {
  @include list-clean();
}

// This selector will exclude all inline classes via :not(...)
$exclude-inline-groups: '';

@each $breakpoint in map-keys($grid-breakpoints) {
  $exclude-inline-groups: $exclude-inline-groups + ':not(.group-inline-#{$breakpoint})';

  $breakpoint-prev: breakpoint-prev($breakpoint);

  // Inline group on breakpoint and above
  @include media-breakpoint-up($breakpoint) {
    .group-inline-#{$breakpoint} {
      @include group-inline();

      > .group-item,
      &.group-all > * {
        @include group-inline-item();
      }

      // Vertical alignment
      &.group-top      { align-items: flex-start; }
      &.group-bottom   { align-items: flex-end;   }
      &.group-middle   { align-items: center;     }
      &.group-baseline { align-items: baseline;   }

      // Single item vertical alignment
      > .group-item-top      { align-self: flex-start; }
      > .group-item-bottom   { align-self: flex-end;   }
      > .group-item-middle   { align-self: center;     }
      > .group-item-baseline { align-self: baseline;   }

      // Equal width of group items
      &.group-eq-width {
        // Reset align-items
        align-items: baseline;

        > .group-item,
        &.group-all > * {
          flex: 1;
          overflow: hidden;
        }
      }

      // Equal height of group items
      // Only supported by inline-groups
      &.group-eq-height {
        align-items: stretch !important;
      }

      // Inline merged group
      &.group-merge {
        @include group-inline-merge();
        margin-bottom: $spacer-y;

        > .group-item,
        &.group-all > * {
          @include group-inline-merge-item();
        }
      }
    }
  }

  // Merge group vertically on previous breakpoint and beneath
  @if $breakpoint-prev {
    @include media-breakpoint-down($breakpoint-prev) {
      .group-inline-#{$breakpoint}.group-merge {
        @include group-merge();
        margin-bottom: $spacer-y;

        > .group-item,
        &.group-all > * {
          @include group-merge-item();
        }
      }
    }
  }
}

// Merge group vertically. Excludes all inline classes.
$group-merge-selector: '.group-merge' + $exclude-inline-groups;
#{$group-merge-selector} {
  @include group-merge();
  margin-bottom: $spacer-y;

  > .group-item,
  &.group-all > * {
    @include group-merge-item();
  }
}

// Fix border overlapping via z-index
.group-merge {
  > .group-item,
  &.group-all > * {
    @include group-item-merge-borderfix();
  }
}

// Equal width of vertical groups
&.group-eq-width {
  align-items: stretch;
}

// Horizontal alignments
.group-start  { justify-content: flex-start; }
.group-end    { justify-content: flex-end;   }
.group-center { justify-content: center;     }
